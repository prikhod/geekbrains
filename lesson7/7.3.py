# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).Данные методы должны применяться
# только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное)
# деление клеток, соответственно. В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.


class Cell:
    def __init__(self, numb_cell):
        self.numb_cell = numb_cell

    def __add__(self, other):
        return Cell(self.numb_cell + other.numb_cell)

    def __sub__(self, other):
        if self.numb_cell >= other.numb_cell:
            return Cell(self.numb_cell - other.numb_cell)
        else:
            raise ValueError('Result cant be negative')

    def __mul__(self, other):
        return Cell(self.numb_cell * other.numb_cell)

    def __truediv__(self, other):
        return Cell(self.numb_cell // other.numb_cell)

    def make_order(self, number_in_line):
        result = ('*' * number_in_line + '\n')*(self.numb_cell//number_in_line) + \
                     '*' * (self.numb_cell % number_in_line)
        return result


if __name__ == '__main__':

    c1 = Cell(15)
    c2 = Cell(10)
    res = c1 + c2
    print(res.make_order(50))
    res = c1 - c2
    print(res.make_order(50))
    res = c1 / c2
    print(res.make_order(50))
    res = c1 * c2
    print(res.make_order(50))
    #  res = c2 - c1
    print(c1.make_order(50))
